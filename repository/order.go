package repository

import (
	"github.com/ekokurniadi/micagen/entity"
	"gorm.io/gorm"
)

type OrderRepository interface {
	SaveOrder(order entity.Order) (string, error)
	UpdateOrder(order entity.Order) (string, error)
	FindByIDOrder(ID int) (entity.Order, error)
	FindAllOrder() ([]entity.Order, error)
	DeleteByIDOrder(ID int) (string error)
}

type orderRepository struct {
	db *gorm.DB
}

func NewOrderRepository(db *gorm.DB) *orderRepository {
	return &orderRepository{db}
}

func (r *orderRepository) SaveOrder(order entity.Order) (entity.Order, error) {
	err := r.db.Create(&order).Error
	if err != nil {
		return order, err
	}
	return order, nil

}
func (r *orderRepository) FindByIDOrder(ID int) (entity.Order, error) {
	var order entity.Order
	err := r.db.Where("id = ? ", ID).Find(&order).Error
	if err != nil {
		return order, err
	}
	return order, nil

}

//Generated by Micagen at 2021-10-27 08:47:24.9957474 +0700 +07 m=+0.034632601
